// ==UserScript==
// @name         Auto Tr·ªìng C√¢y - Pixels
// @namespace    https://pixels.xyz/
// @version      1.1
// @description  T·ª± ƒë·ªông click ru·ªông ph√π h·ª£p (tr·ªìng, t∆∞·ªõi, c·∫Øt) theo item ƒëang c·∫ßm. C√≥ hi·ªáu ·ª©ng chu·ªôt th·∫≠t qua HUD tr√°nh ban.
// @author       Drayke
// @icon         https://play.pixels.xyz/favicon/favicon.ico
// @match        *://play.pixels.xyz/*
// @grant        none
// ==/UserScript==

(function () {
  "use strict";
async function moveHudTo(x, y, steps = 20, delay = 8) {
  const hud = document.querySelector('[class^="Hud_selectedItem__"]');
  if (!hud) return;

  // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
  const m = hud.style.transform.match(/translate3d\(([\d.]+)px,\s*([\d.]+)px/);
  let curX = m ? parseFloat(m[1]) : 0;
  let curY = m ? parseFloat(m[2]) : 0;

  const dx = (x - curX) / steps;
  const dy = (y - curY) / steps;

  for (let i = 1; i <= steps; i++) {
    curX += dx;
    curY += dy;
    hud.style.transform = `translate3d(${curX}px, ${curY}px, 0px)`;
    await new Promise(r => setTimeout(r, delay + Math.random() * 3));
  }
}
  /************ ‚öôÔ∏è H√ÄM HI·ªÇN TH·ªä TH√îNG B√ÅO ************/
  function showMessage(msg) {
    const player = window.pga?.helpers?.getRoomScene?.()?.selfPlayer;
    if (player) player.showChatMessage(msg);
    console.log(msg);
  }

  /************ üñ±Ô∏è H√ÄM CLICK C√ì DI CHUY·ªÇN CHU·ªòT ************/
  async function simulateEntityClick(entity) {
  try {
    const room = window.pga?.helpers?.getRoomScene?.();
    const cam = room?.cameras?.main;
    const canvas = document.querySelector("canvas");
    if (!canvas || !cam) return;

    // üü¢ T√≠nh v·ªã tr√≠ entity tr√™n m√†n h√¨nh
    const worldX = entity.x ?? 0, worldY = entity.y ?? 0;
    const ex = (worldX - cam.worldView.x) * cam.zoom;
    const ey = (worldY - cam.worldView.y) * cam.zoom;

    // üü¢ Di chuy·ªÉn HUD (icon item) t·ªõi entity
    await moveHudTo(ex, ey, 18, 6); // 18 b∆∞·ªõc, delay 6ms ‚Üí t·ª± nhi√™n, nhanh

    // üü¢ Click th·∫≠t (game logic)
    const pointer = {
      worldX, worldY,
      center: { x: worldX, y: worldY },
      position: { x: worldX, y: worldY },
      leftButtonReleased: () => true,
      leftButtonDown: () => false,
      rightButtonReleased: () => false,
      rightButtonDown: () => false,
      middleButtonReleased: () => false,
      middleButtonDown: () => false,
    };
    entity.clicked(pointer, {});
  } catch (err) {
    //console.warn("[Click Error]", err);
  }
}

  /************ üåæ H√ÄM T·ª∞ ƒê·ªòNG CLICK RU·ªòNG ************/
let STOP_AUTO = false; // üö® bi·∫øn d·ª´ng kh·∫©n c·∫•p to√†n c·ª•c

async function clickAllCropsSmart() {
  STOP_AUTO = false; // reset tr∆∞·ªõc m·ªói l·∫ßn ch·∫°y

  const room = window.pga?.helpers?.getRoomScene?.();
  if (!room?.entities) return showMessage("‚ùå Kh√¥ng t√¨m th·∫•y room.entities");

  const entities = Array.from(room.entities.values());
  const redux = window.pga?.helpers?.getReduxValue?.()?.storage;
  const selectedItemId = redux?.selectedItem?.id;
  const selectedQty = redux?.selectedQty ?? 0;

  if (!selectedItemId) return showMessage("‚ö†Ô∏è Kh√¥ng c√≥ item n√†o ƒëang ƒë∆∞·ª£c c·∫ßm!");
  if (selectedQty < 1) return showMessage("‚ö†Ô∏è H·∫øt item ƒë·ªÉ s·ª≠ d·ª•ng!");

  // üéØ X√°c ƒë·ªãnh lo·∫°i h√†nh ƒë·ªông
  let targetStates = [];
  if (selectedItemId === "itm_rustyWateringCan") targetStates = ["planted"];
  else if (selectedItemId.endsWith("Seeds")) targetStates = ["empty"];
  else if (selectedItemId.startsWith("itm_shears_")) targetStates = ["grown"];
  else return showMessage("‚ö†Ô∏è Item n√†y kh√¥ng h·ª£p l·ªá cho auto.");

  // üåæ L·ªçc crop ph√π h·ª£p
  const crops = entities.filter((ent) => {
    const id = ent?.gameEntity?.id;
    const s =
      (ent?.state?.state ||
        ent?.state ||
        ent?.properties?.state ||
        ent?.properties?.growthStage ||
        ""
      ).toString().toLowerCase();
    return id === "ent_allcrops" && targetStates.includes(s);
  });

  if (!crops.length) return showMessage("‚úÖ Kh√¥ng c√≥ √¥ ru·ªông ph√π h·ª£p ƒë·ªÉ click.");

  // üß≠ Gom nh√≥m ru·ªông theo h√†ng (theo y, l√†m tr√≤n)
  const rows = {};
  for (const c of crops) {
    const y = Math.round(c.y / 10) * 10;
    if (!rows[y]) rows[y] = [];
    rows[y].push(c);
  }

  // üîÄ S·∫Øp x·∫øp h√†ng theo y tƒÉng d·∫ßn
  const sortedY = Object.keys(rows)
    .map(Number)
    .sort((a, b) => a - b);

  showMessage(`üåæ Auto ${crops.length} √¥ | Zigzag theo X`);
  console.log("‚è≥ Nh·∫•n [S] ƒë·ªÉ D·ª™NG KH·∫®N C·∫§P!");

  let reverse = false;
  for (const y of sortedY) {
    if (STOP_AUTO) {
      showMessage("üõë Auto d·ª´ng kh·∫©n c·∫•p!");
      break;
    }

    let row = rows[y];
    row.sort((a, b) => a.x - b.x);
    if (reverse) row.reverse();

    for (const crop of row) {
      if (STOP_AUTO) {
        showMessage("üõë Auto d·ª´ng kh·∫©n c·∫•p!");
        return;
      }

      const curQty = window.pga?.helpers?.getReduxValue?.()?.storage?.selectedQty ?? 0;
      if (curQty < 1) {
        showMessage("‚ùå H·∫øt item gi·ªØa ch·ª´ng ‚Äî d·ª´ng auto.");
        return;
      }

      await simulateEntityClick(crop);
      await new Promise((r) => setTimeout(r, 10 + Math.random() * 10)); // ‚ö° click 10‚Äì20ms
    }

    reverse = !reverse; // ƒë·∫£o h∆∞·ªõng m·ªói h√†ng
  }

  if (!STOP_AUTO) showMessage("‚úÖ Ho√†n t·∫•t auto zigzag!");
}
  /************ üéÆ PH√çM T·∫ÆT ************/
  document.addEventListener("keydown", (e) => {
    if (e.code === "Delete") {
     clickAllCropsSmart();
    }
      if (e.code === "space") {
    STOP_AUTO = true;
    }
  });

 // console.log("‚úÖ [Auto Farm] Nh·∫•n [Space] ƒë·ªÉ tr·ªìng/t∆∞·ªõi/c·∫Øt t·ª± ƒë·ªông | [Del] ƒë·ªÉ xo√° log.");
})();
