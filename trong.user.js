// ==UserScript==
// @name         Auto Tr·ªìng C√¢y - Pixels
// @namespace    https://pixels.xyz/
// @version      1.1
// @description  T·ª± ƒë·ªông click ru·ªông ph√π h·ª£p (tr·ªìng, t∆∞·ªõi, c·∫Øt) theo item ƒëang c·∫ßm. C√≥ hi·ªáu ·ª©ng chu·ªôt th·∫≠t qua HUD tr√°nh ban.
// @author       Drayke
// @icon         https://play.pixels.xyz/favicon/favicon.ico
// @match        *://play.pixels.xyz/*
// @grant        none
// ==/UserScript==

(function () {
    "use strict";
    function waitForOnGameEvent(callback) {
        const check = setInterval(() => {
            if (typeof window.onGameEvent === "function") {
                clearInterval(check);
                callback();
            }
        }, 300);
    }
    function stop_auto(){
        if(!STOP_AUTO){
            STOP_AUTO = true
        }
    }

    /************ ü™Ñ DI CHUY·ªÇN HUD ************/
    async function moveHudTo(x, y, steps = 20, delay = 8) {
        const hud = document.querySelector('[class^="Hud_selectedItem__"]');
        if (!hud) return;
        const m = hud.style.transform.match(/translate3d\(([\d.]+)px,\s*([\d.]+)px/);
        let curX = m ? parseFloat(m[1]) : 0;
        let curY = m ? parseFloat(m[2]) : 0;
        const dx = (x - curX) / steps;
        const dy = (y - curY) / steps;
        for (let i = 1; i <= steps; i++) {
            curX += dx;
            curY += dy;
            hud.style.transform = `translate3d(${curX}px, ${curY}px, 0px)`;
            await new Promise(r => setTimeout(r, delay + Math.random() * 3));
        }
    }

    /************ üí¨ TH√îNG B√ÅO TRONG GAME ************/
    function showMessage(msg) {
        const player = window.pga?.helpers?.getRoomScene?.()?.selfPlayer;
        if (player) player.showChatMessage(msg);
        console.log(msg);
    }

    /************ üñ±Ô∏è CLICK ENTITY ************/
    async function simulateEntityClick(entity) {
        try {
            const room = window.pga?.helpers?.getRoomScene?.();
            const cam = room?.cameras?.main;
            const canvas = document.querySelector("canvas");
            if (!canvas || !cam) return;

            const worldX = entity.x ?? 0, worldY = entity.y ?? 0;
            const ex = (worldX - cam.worldView.x) * cam.zoom;
            const ey = (worldY - cam.worldView.y) * cam.zoom;

            await moveHudTo(ex, ey, 18, 6);

            const pointer = {
                worldX,
                worldY,
                center: { x: worldX, y: worldY },
                position: { x: worldX, y: worldY },
                leftButtonReleased: () => true,
                leftButtonDown: () => false,
                rightButtonReleased: () => false,
                rightButtonDown: () => false,
                middleButtonReleased: () => false,
                middleButtonDown: () => false,
            };
            entity.clicked(pointer, {});
        } catch (err) {}
    }

    /************ üåæ AUTO TR·ªíNG / T∆Ø·ªöI / C·∫ÆT ************/
    let STOP_AUTO = false;

async function clickAllCropsSmart() {
  STOP_AUTO = false;

  const room = window.pga?.helpers?.getRoomScene?.();
  if (!room?.entities) return showMessage("‚ùå Kh√¥ng t√¨m th·∫•y room.entities");

  const entities = Array.from(room.entities.values());
  const redux = window.pga?.helpers?.getReduxValue?.()?.storage;
  const selectedItemId = redux?.selectedItem?.id;
  const selectedQty = redux?.selectedQty ?? 0;

  if (!selectedItemId) return showMessage("‚ö†Ô∏è Kh√¥ng c√≥ item n√†o ƒëang ƒë∆∞·ª£c c·∫ßm!");
  if (selectedQty < 1) return showMessage("‚ö†Ô∏è H·∫øt item ƒë·ªÉ s·ª≠ d·ª•ng!");

  let targetStates = [];
  let reverseMode = false;

  if (selectedItemId === "itm_rustyWateringCan") {
    targetStates = ["planted"];
    reverseMode = true; // üîÅ khi t∆∞·ªõi, ch·∫°y ng∆∞·ª£c
  } else if (selectedItemId.endsWith("eeds")) targetStates = ["empty"];
  else if (selectedItemId.startsWith("itm_shears_")) targetStates = ["grown"];
  else return showMessage("‚ö†Ô∏è Item n√†y kh√¥ng h·ª£p l·ªá cho auto.");

  // üåæ L·ªçc crop ph√π h·ª£p
  const crops = entities.filter((ent) => {
    const id = ent?.gameEntity?.id;
    const s =
      (ent?.state?.state ||
        ent?.state ||
        ent?.properties?.state ||
        ent?.properties?.growthStage ||
        ""
      ).toString().toLowerCase();

    // ‚ö†Ô∏è N·∫øu ƒëang t∆∞·ªõi n∆∞·ªõc ‚Üí ch·ªâ l·∫•y crop c√≥ utcTarget == 0
    if (selectedItemId === "itm_rustyWateringCan") {
      const target = ent?.currentState?.displayInfo?.utcTarget ?? 1;
      return id === "ent_allcrops" && targetStates.includes(s) && target === 0;
    }

    // c√°c tr∆∞·ªùng h·ª£p c√≤n l·∫°i (gieo ho·∫∑c c·∫Øt)
    return id === "ent_allcrops" && targetStates.includes(s);
  });

  if (!crops.length)
    return showMessage("‚úÖ Kh√¥ng c√≥ √¥ ru·ªông ph√π h·ª£p ƒë·ªÉ click.");

  // üß≠ Gom nh√≥m crop theo h√†ng (theo y, l√†m tr√≤n)
  const rows = {};
  for (const c of crops) {
    const y = Math.round(c.y / 10) * 10;
    if (!rows[y]) rows[y] = [];
    rows[y].push(c);
  }

  let sortedY = Object.keys(rows)
    .map(Number)
    .sort((a, b) => a - b);
  if (reverseMode) sortedY.reverse(); // üîÅ n·∫øu watering ‚Üí ƒëi ng∆∞·ª£c h√†ng (d∆∞·ªõi l√™n)

  showMessage(
    `üåæ Auto ${crops.length} √¥ | ${
      reverseMode ? "Reverse" : "Zigzag"
    } mode`
  );
  console.log("‚è≥ Nh·∫•n [S] ƒë·ªÉ D·ª™NG KH·∫®N C·∫§P!");

  let reverse = false;
  for (const y of sortedY) {
    if (STOP_AUTO) return showMessage("üõë Auto d·ª´ng kh·∫©n c·∫•p!");

    let row = rows[y];
    row.sort((a, b) => a.x - b.x);
    if (reverse) row.reverse();

    for (const crop of row) {
      if (STOP_AUTO) return showMessage("üõë Auto d·ª´ng kh·∫©n c·∫•p!");

      // ‚ö†Ô∏è Ki·ªÉm tra tool health & energy
      const health =
        window.pga?.helpers?.getReduxValue?.()?.storage?.selectedSlot?.state
          ?.displayInfo?.health ?? 999;
      const energy =
        window.pga?.helpers?.getReduxValue?.()?.game?.player?.full?.energy
          ?.level ?? 999;

      if (health <= 1) {
        STOP_AUTO = true;
        return stopMsg("üõë Tool s·∫Øp h·ªèng! D·ª´ng auto ngay!");
      }
      if (energy <= 4) {
        STOP_AUTO = true;
        return stopMsg("ü™´ Energy qu√° th·∫•p (<4)! D·ª´ng auto!");
      }

      const curQty =
        window.pga?.helpers?.getReduxValue?.()?.storage?.selectedQty ?? 0;
      if (curQty < 1) {
        showMessage("‚ùå H·∫øt item gi·ªØa ch·ª´ng ‚Äî d·ª´ng auto.");
        return;
      }

      await simulateEntityClick(crop);
      await new Promise((r) => setTimeout(r, 10 + Math.random() * 10)); // ‚ö° 10‚Äì20ms
    }

    reverse = !reverse;
  }

  if (!STOP_AUTO) showMessage("‚úÖ Ho√†n t·∫•t auto!");

  function stopMsg(msg) {
    showMessage(msg);
    console.warn(msg);
  }
}

async function autoChopTreesVerticalProgressiveFast() {
  STOP_AUTO = false;

  const room = window.pga?.helpers?.getRoomScene?.();
  if (!room?.entities) return showMessage("‚ùå Kh√¥ng t√¨m th·∫•y room.entities");

  const entities = Array.from(room.entities.values());

  // üå≤ L·ªçc c√¢y b·∫Øt ƒë·∫ßu b·∫±ng ent_tree v√† state = mature ho·∫∑c stump
  const trees = entities.filter((ent) => {
    const id = ent?.gameEntity?.id?.toLowerCase?.() || "";
    const s =
      (ent?.state?.state ||
        ent?.state ||
        ent?.properties?.state ||
        ent?.properties?.growthStage ||
        ""
      ).toString().toLowerCase();
    return id.startsWith("ent_tree") && ["mature", "stump"].includes(s);
  });

  if (!trees.length) return showMessage("‚úÖ Kh√¥ng c√≥ c√¢y n√†o ƒë·ªÉ ch·∫∑t.");

  // üß≠ Gom nh√≥m c√¢y theo c·ªôt (theo X, l√†m tr√≤n)
  const columns = {};
  for (const t of trees) {
    const x = Math.round(t.x / 10) * 10;
    if (!columns[x]) columns[x] = [];
    columns[x].push(t);
  }

  const sortedX = Object.keys(columns)
    .map(Number)
    .sort((a, b) => a - b);

  showMessage(`üå≤ Auto ch·∫∑t si√™u t·ªëc | D·ª´ng khi tool s·∫Øp h·ªèng ho·∫∑c energy th·∫•p`);
  console.log("‚è≥ Nh·∫•n [S] ƒë·ªÉ D·ª™NG KH·∫®N C·∫§P!");

  let reverse = false;

  for (;;) {
    const cols = reverse ? [...sortedX].reverse() : sortedX;

    for (const x of cols) {
      if (STOP_AUTO) return stopMsg("üõë D·ª´ng kh·∫©n c·∫•p!");

      let col = columns[x].sort((a, b) => a.y - b.y);
      console.log(`üå≥ Ch·∫∑t c·ªôt X=${x} (${col.length} c√¢y)`);

      while (!STOP_AUTO) {
        let active = 0;

        for (const tree of col) {
          if (STOP_AUTO) break;

          // ‚ö†Ô∏è Ki·ªÉm tra health & energy TR∆Ø·ªöC KHI CLICK
          const redux = window.pga?.helpers?.getReduxValue?.();
          const health =
            redux?.storage?.selectedSlot?.state?.displayInfo?.health ?? 9999;
          const energy = redux?.game?.player?.full?.energy?.level ?? 9999;

          if (health <= 1) {
            STOP_AUTO = true;
            return showMessage("üõë Tool s·∫Øp h·ªèng! D·ª´ng auto ngay!");
          }
          if (energy <= 4) {
            STOP_AUTO = true;
            return showMessage("ü™´ Energy qu√° th·∫•p (<4)! D·ª´ng auto!");
          }

          // üîç Ki·ªÉm tra tr·∫°ng th√°i c√¢y
          const state =
            (tree?.state?.state ||
              tree?.state ||
              tree?.properties?.state ||
              tree?.properties?.growthStage ||
              ""
            ).toString().toLowerCase();

          // üå± N·∫øu c√¢y ƒë√£ th√†nh seed ‚Üí coi nh∆∞ xong, b·ªè qua
          if (state === "seed") continue;

          // ü™ì Ch·∫∑t n·∫øu c√≤n mature ho·∫∑c stump
          if (["mature", "stump"].includes(state)) {
            active++;
            await simulateEntityClick(tree);
            await sleep(40 + Math.random() * 30); // ‚ö° 40‚Äì70 ms gi·ªØa click
          }
        }

        if (active === 0) {
          console.log(`‚úÖ C·ªôt X=${x} xong (t·∫•t c·∫£ th√†nh seed)!`);
          break;
        }

        await sleep(80); // ngh·ªâ ng·∫Øn gi·ªØa v√≤ng
      }

      await sleep(120); // ngh·ªâ nh·∫π gi·ªØa h√†ng
    }

    reverse = !reverse; // ƒë·∫£o chi·ªÅu sau m·ªói v√≤ng
  }

  // Helpers
  function stopMsg(msg) {
    showMessage(msg);
    console.warn(msg);
  }

  function sleep(ms) {
    return new Promise((r) => setTimeout(r, ms));
  }
}


    waitForOnGameEvent(() => {
        window.onGameEvent("PLAYER_JOINED", stop_auto);
    })
    /************ ‚å®Ô∏è PH√çM T·∫ÆT ************/
    document.addEventListener("keydown", e => {
        if (e.code === "Delete") clickAllCropsSmart(); // B·∫Øt ƒë·∫ßu auto
        if (e.code === "PageDown") autoChopTreesVerticalProgressiveFast(); // B·∫Øt ƒë·∫ßu auto
        if (e.code === "Space") STOP_AUTO = true; // D·ª´ng kh·∫©n c·∫•p
    });
})();
